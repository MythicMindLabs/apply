# VoiceDOT Payment Platform Specification

This document outlines the design and step-by-step implementation plan for a **voice-controlled payment platform** built on Polkadot.

The API supports voice-to-blockchain transactions, allowing users to send DOT and other Polkadot ecosystem tokens via natural voice commands. The system processes voice input, extracts payment intent, confirms transactions through voice responses, and executes transfers on the Polkadot network.

Platform components:
- **Cloudflare Workers** (Edge Runtime)
- **Hono.js** (TypeScript API framework)
- **ElevenLabs** (Voice processing)
- **PAPI** (Polkadot blockchain integration)

---

## 1. Technology Stack

| Component            | Technology                           |
|----------------------|--------------------------------------|
| **Edge Runtime**     | Cloudflare Workers                   |
| **API Framework**    | Hono.js (TypeScript-based)           |
| **Voice Processing** | ElevenLabs (speech-to-text & TTS)    |
| **Blockchain API**   | PAPI (Polkadot network)              |
| **Database**         | Cloudflare D1 (SQLite)               |
| **ORM**              | Drizzle ORM                          |

---

## 2. Database Schema Design

The database stores transaction logs, user sessions, and voice command history for audit and debugging.

### 2.1 Users Table

| Field           | Type    | Constraints              |
|-----------------|---------|-------------------------|
| id              | TEXT    | Primary Key             |
| wallet_address  | TEXT    | NOT NULL, UNIQUE        |
| created_at      | INTEGER | NOT NULL                |
| last_active     | INTEGER | NOT NULL                |

### 2.2 Transactions Table

| Field             | Type    | Constraints                           |
|-------------------|---------|---------------------------------------|
| id                | TEXT    | Primary Key                           |
| user_id           | TEXT    | Foreign Key (users.id)                |
| voice_command     | TEXT    | NOT NULL                              |
| parsed_intent     | TEXT    | NOT NULL (JSON string)                |
| recipient_address | TEXT    | NOT NULL                              |
| amount            | TEXT    | NOT NULL (big number support)         |
| token_symbol      | TEXT    | NOT NULL                              |
| transaction_hash  | TEXT    |                                       |
| status            | TEXT    | NOT NULL ('pending', 'confirmed', 'failed') |
| created_at        | INTEGER | NOT NULL                              |
| confirmed_at      | INTEGER |                                       |

### 2.3 Voice_Sessions Table

| Field             | Type    | Constraints            |
|-------------------|---------|------------------------|
| id                | TEXT    | Primary Key            |
| user_id           | TEXT    | Foreign Key (users.id) |
| audio_url         | TEXT    |                        |
| transcription     | TEXT    |                        |
| response_audio_url| TEXT    |                        |
| response_text     | TEXT    |                        |
| created_at        | INTEGER | NOT NULL               |

---

## 3. API Endpoints

Organized for voice processing, transactions, and wallet operations.

### 3.1 Voice Processing Endpoints

- **POST `/voice/process`**  
  Process voice input for payment commands  
  *Payload:*  

{
"audio_data": "base64_encoded_audio",
"user_id": "wallet_address_or_session_id",
"format": "mp3|wav|webm"
}

*Response*: Parsed intent, confirmation audio

- **POST `/voice/confirm`**  
Process voice confirmation for pending transactions  
*Payload:*  
{
"audio_data": "base64_encoded_audio",
"transaction_id": "uuid",
"user_id": "wallet_address_or_session_id"
}

---

### 3.2 Transaction Endpoints

- **GET `/transactions`**  
Get user transaction history  
*Query Params*: user_id, status, limit, offset

- **GET `/transactions/:id`**  
Get details for a specific transaction

- **POST `/transactions/execute`**  
Execute confirmed transaction  
*Payload:*  
{
"transaction_id": "uuid",
"signed_extrinsic": "hex_string"
}


---

### 3.3 Wallet Integration Endpoints

- **POST `/wallet/connect`**  
Connect and verify wallet  
*Payload:*  
{
"wallet_address": "polkadot_address",
"signature": "signed_message",
"message": "verification_message"
}

- **GET `/wallet/balance`**  
Get wallet balance for tokens  
*Query Params*: wallet_address, token_symbols

---

### 3.4 Health and Status Endpoints

- **GET `/health`** — API health check
- **GET `/status/polkadot`** — Polkadot network connection status

---

## 4. Integrations

### 4.1 ElevenLabs

- Speech-to-text for command processing
- Text-to-speech for confirmations/responses
- Voice cloning (future)

### 4.2 PAPI (Polkadot API)

- Connect to Polkadot/parachain networks
- Query balances and history
- Submit extrinsics, handle network upgrades

### 4.3 Wallet Integration

- Support for Polkadot.js, Talisman, SubWallet
- Message signing for authentication
- Transaction signing delegation

---

## 5. Development Milestones

### Milestone 1: Enhanced Voice Processing & Multi-Currency Support

**Focus**: Advanced voice capabilities, full token ecosystem  
**Core Features**:
- **Perplexity.ai NLP Processing**
- Complex payment commands, context-aware handling, entity extraction
- Multi-language preparation
- **Multi-Currency Support**
- DOT & parachain token transfers
- Real-time prices, asset discovery
- **Complex Command Handling**
- Batch, conditional, scheduled payments, transaction templates
**Technical Implementation**:  
Perplexity.ai for NLP, PAPI for assets, enhanced pipeline, intelligent parsing

---

### Milestone 2: Cross-Chain Integration & Production Security

**Focus**: XCM & enterprise security  
**Core Features**:
- **XCM Support**
- Cross-parachain transfers, relay/parachain ops, DeFi, XCM tracking
- **Production Security**
- End-to-end encryption, hardware wallets, audit logging, rate limiting
- **Multi-Factor Authentication**
- Voice biometrics, hardware wallets, OTP, behavioral detection, recovery
**Technical Implementation**:  
XCM construction, crypto security, biometrics, monitoring, compliance

---

## 6. Security Considerations

- Wallet private keys **never stored**
- Voice data **encrypted** (in transit & at rest)
- Transaction signing **client-side only**
- **Rate limiting** on processing endpoints
- **Audit logs** for all transactions & voice commands

---

## 7. Environment Variables

**Configure these in Cloudflare Workers:**
ELEVENLABS_API_KEY # ElevenLabs API authentication
POLKADOT_RPC_ENDPOINT # Polkadot network RPC URL
DATABASE_URL # Cloudflare D1 database connection
ENCRYPTION_KEY # For encrypting sensitive voice data
undefined
